pwa所支持的容器
运行pwa的必要条件

1,优势（带来的便利，体验等）
2,使用条件（平台，浏览器版本，兼容性，访问限制等）
3,使用场景(应用翼支付，现有H5项目的或将来的 等 场景）
4,如何使用？
5,有哪些可实现功能？

service worker
基本特点
* 运行在它自己的全局脚本上下文中
* 不绑定到具体的网页
* 无法修改网页中的元素，因为它无法访问 DOM
* 只能使用 HTTPS
* 拦截进出的 HTTP 请求，从而完全控制你的网站
* 与主JS线程独立，不会被阻塞
* 完全异步，无法使用localStorage
* 生命周期(想象成红绿灯)

'install'用来缓存文件，'activate'用来缓存更新，'fetch'用来拦截请求直接返回缓存数据

PWA的核心技术
* Web App Manifest – 在主屏幕添加app图标，定义手机标题栏颜色之类
* Service Worker – 缓存，离线开发，以及地理位置信息处理等
* App Shell – 先显示APP的主结构，再填充主数据，更快显示更好体验
* Push Notification – 消息推送

什么是pwa
“这些应用没有通过应用商店进行打包和部署，它们只是汲取了所需要的原生功能的网站而已。”
1.PWA 会指向一个清单 (manifest) 文件，其中包含网站相关的信息，包括图标，背景屏幕，颜色和默认方向。
2.PWA 使用了叫做 Service Workers 的重要新功能，它可以令你深入网络请求并构建更好的 Web 体验。
3.使用 Service Workers，你可以选择性地缓存部分网站以提供离线体验。
4.PWA 还允许你将其“添加”到设备的主屏幕上。

改造成本
* 第一步，应该是安全，将全站 HTTPS 化，因为这是 PWA 的基础，没有 HTTPS，就没有 Service Worker
* 第二步，应该是 Service Worker 来提升基础性能，离线提供静态文件，把用户首屏体验提升上来
* 第三步，App Manifest，这一步可以和第二步同时进行
* 后续，再考虑其他的特性，离线消息推送等




Service Worker 做缓存处理
 self.addEventListener('install', event => {
  // 但是建议只做一些轻量级和非常重要资源的缓存，减少安装失败的概率
  // 安装阶段跳过等待，直接进入 active
   event.waitUntil(self.skipWaiting())
 })
install
安装
self.addEventListener('activate', function (event) {
   // event.waitUntil(self.clients.claim())
   console.log('activate~')
   event.waitUntil(
     Promise.all([
       // 更新客户端
       self.clients.claim(),
       // 清理旧版本
       caches.keys().then(function (cacheList) {
         return Promise.all(
           cacheList.map(function (cacheName) {
               return caches.delete(cacheName)
           })
         )
       })
     ])
   )
 })
activate
激活
fetch
请求
当service worker 被修改时,会安装新的service worker并install,但是旧的service worker仍然在运行,所以新的service worker会进入waiting状态. 为了避免这种情况 需要在install监听中添加self.skipWaiting()跳过waiting状态,直接进入activate状态,在activate监听中通过clients.claim()更新所有客户端上的service worker
根据需求缓存浏览器请求	
